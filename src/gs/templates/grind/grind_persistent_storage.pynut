class GrindStoryPagePersistentStorage extends GrindStoryPage {

    slot_name = null;
    slot_value = null;

    constructor(slot_name, slot_value) {
        this.slot_name = slot_name;
        this.slot_value = slot_value;

        this.story_page = GSStoryPage.New(GSCompany.COMPANY_INVALID, "Grind: Persistent Storage - " + this.slot_name);

        GSStoryPage.NewElement(this.story_page, GSStoryPage.SPET_TEXT, 1, "This page will not update unless manually refreshed");

        local btn_refresh_page = GSStoryPage.NewElement(this.story_page, GSStoryPage.SPET_BUTTON_PUSH, 1, "Refresh page");
        local handler_kwargs = {button_element_id = btn_refresh_page, button_name = "btn_refresh_page", page_context = this};
        EventManager().RegisterEvent("ET_STORYPAGE_BUTTON_CLICK", this.GrindStoryPagePersistenStorageButtonHandler, handler_kwargs);

        this.CreatePageElements();
    }

    function GrindStoryPagePersistenStorageButtonHandler(event, handler_kwargs) {
        // we use one generic button handler function for Grind persistent storage stuff
        // this is because button handler needs to check button IDs, which the event manager doesn't do as it's too specific to button events

        local button_event = GSEventStoryPageButtonClick.Convert(event);

        if (button_event.GetElementID() == handler_kwargs.button_element_id) {
            // this can either handle button clicks directly inline, or call out to functions, as needed
            if (handler_kwargs.button_name == "btn_refresh_page") {
                handler_kwargs.page_context.UpdatePage();
            }
        }
    }

    function CreatePageElements() {
        // define the elements
        this.page_elements = [];
        // assume we want to show all the keys for the slot, then just repr the values, even if they're nested tables
        foreach (prop_name, prop_value in this.slot_value) {
            // optional extra hint text to aid e.g. finding storage contents for a specific industry or town from the key
            if (this.slot_name in PersistentStorageManager.slot_key_types) {
                if (PersistentStorageManager.slot_key_types[this.slot_name] == "industry") {
                    this.page_elements.append({
                        reference = null,
                        element_text = GSText(GSText.STR_GRIND_TEST_INDUSTRY_NAME, prop_name)
                    });
                }
            }
            // the storage contents
            this.page_elements.append({
                reference = null,
                element_text = GSText(GSText.STR_GRIND_TEST, prop_name.tostring(), Repr(prop_value))
            });
        }
        // add the elements
        foreach (page_element in this.page_elements) {
            page_element.reference = GSStoryPage.NewElement(this.story_page, GSStoryPage.SPET_TEXT, 1, page_element.element_text);
        }
    }

    function UpdatePage() {
        Log.Info("Updating Grind Persistent Storage page - " + this.slot_name);
        // remove all elements and recreate them, it's the safest way to accommodate changing entities such as industries which can open / close
        local asyncmode = GSAsyncMode(true);
        foreach (page_element in this.page_elements) {
            GSStoryPage.RemoveElement(page_element.reference);
        }
        asyncmode = null;
        // async to remove, but not to re-add, as the slight delay between each element appearing gives a visual cue that the page is refreshed
        this.CreatePageElements();
        GSStoryPage.SetDate(this.story_page, GSDate.GetCurrentDate());
    }

}
