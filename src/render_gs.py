import codecs  # used for writing files - more unicode friendly than standard open() module

import sys
import shutil
import os

currentdir = os.curdir
from time import time

import firs
import global_constants
import utils
from gs.gs_helper import GSHelper
from polar_fox import git_info

registered_cargos = firs.registered_cargos
registered_industries = firs.registered_industries
registered_economies = firs.registered_economies

from chameleon import PageTemplateLoader  # chameleon used in most template cases

# get args passed by makefile
makefile_args = utils.get_makefile_args(sys)

gs_src = os.path.join(currentdir, "src", "gs")
gs_src_templates = os.path.join(gs_src, "templates")
gs_dst = os.path.join(firs.generated_files_path, "gs")


def render_nuts(nuts_by_subdir):
    meta_header = PageTemplateLoader(gs_src_templates, format="text")["_meta_header.pt"](
        git_info=git_info
    )

    for subdir_name, nuts in nuts_by_subdir.items():
        if subdir_name == "root":
            nut_templates = PageTemplateLoader(gs_src_templates, format="text")
        else:
            nut_templates = PageTemplateLoader(
                os.path.join(gs_src_templates, subdir_name), format="text"
            )
        if subdir_name == "root":
            dst_dir = gs_dst
        else:
            dst_dir = os.path.join(gs_dst, subdir_name)
            if os.path.exists(dst_dir):
                shutil.rmtree(dst_dir)
            if not os.path.exists(dst_dir):
                os.mkdir(dst_dir)
        for nut_name in nuts:
            nut_template = nut_templates[nut_name + ".pynut"]
            dst_file = codecs.open(
                os.path.join(dst_dir, nut_name + ".nut"), "w", "utf8"
            )
            # dst_file.write(meta_header) # tempoarily disabled as it borks line numbers for debugging
            result = utils.unescape_chameleon_output(
                nut_template(
                    gs_helper=GSHelper(),
                    makefile_args=makefile_args,
                    git_info=git_info,
                    registered_industries=registered_industries,
                    registered_cargos=registered_cargos,
                    registered_economies=registered_economies,
                    utils=utils,
                )
            )
            dst_file.write(result)
            dst_file.close()


def render_docs(doc_list, file_type, source_is_repo_root=False):
    if source_is_repo_root:
        doc_path = os.path.join(currentdir)
    else:
        # GS doesn't have complex docs, so keep them with the GS src
        doc_path = gs_src

    docs_templates = PageTemplateLoader(doc_path, format="text")

    for doc_name in doc_list:
        template = docs_templates[
            doc_name + ".pt"
        ]  # .pt is the conventional extension for chameleon page templates
        doc = template(git_info=git_info)
        doc_file = codecs.open(
            os.path.join(gs_dst, doc_name + "." + file_type),
            "w",
            "utf8",
        )
        doc_file.write(doc)
        doc_file.close()


def main():
    start = time()
    print("[RENDER GS]")

    if os.path.exists(gs_dst):
        shutil.rmtree(gs_dst)
    if not os.path.exists(gs_dst):
        os.mkdir(gs_dst)
    hint_file = codecs.open(
        os.path.join(gs_dst, "_gs_files_here_are_generated.txt"), "w", "utf8"
    )
    hint_file.write(
        "Don't edit the gs files here.  They're generated by the build script. \n Edit the ones in src/gs instead."
    )
    hint_file.close()

    nuts_by_subdir = {
        # alphabetise nuts in each list for simplicity
        "root": [
            "firs",
            "info",
            "main",
            "persistent_storage",
            "repr",
            "version",
        ],
        "grind": ["grind_industries", "grind_storybook", "grind_persistent_storage", "grind_utils"],
        "atlas": ["tile_lists_by_shape"],
        "vulcan": [
            "companies",
            "industry_cargo_stats",
            "industry_control",
            "industry_ownership",
            "industry_spec",
            "log",
            "map_curator",
            "manufacturers",
            "town_control",
            "town_story_book",
        ],
        # "minigames": ["winning_move", "zellepins"],
    }
    render_nuts(nuts_by_subdir)

    license_docs = ["license"]
    render_docs(
        license_docs,
        "txt",
        source_is_repo_root=True,
    )
    plain_text_docs = [
        "readme"
    ]  # note no changelog as of Aug 2023, overkill, adjust as needed
    render_docs(
        plain_text_docs,
        "txt",
    )

    # copy lang dir also
    shutil.copytree(os.path.join(gs_src, "lang"), os.path.join(gs_dst, "lang"))

    # eh, how long does this take anyway?
    print(
        "[RENDER GS]",
        "- complete",
        format((time() - start), ".2f") + "s",
    )


if __name__ == "__main__":
    main()
